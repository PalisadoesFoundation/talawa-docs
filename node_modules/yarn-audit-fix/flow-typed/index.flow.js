/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.1
 */

declare module "yarn-audit-fix" {
  declare export * from "yarn-audit-fix/target/es5";
}

declare module "yarn-audit-fix/target/es6" {
  declare export { getFlow } from "yarn-audit-fix/target/es6/flows";

  declare export * from "yarn-audit-fix/target/es6/ifaces";

  declare export * from "yarn-audit-fix/target/es6/lockfile";

  declare export * from "yarn-audit-fix/target/es6/runner";

  declare export * from "yarn-audit-fix/target/es6/stages";

  declare export * from "yarn-audit-fix/target/es6/util";
}

declare module "yarn-audit-fix/target/es6/flows" {
  import type { TFlow } from "yarn-audit-fix/target/es6/ifaces";

  declare export var convert: TFlow;
  declare export var patch: TFlow;
  declare export var getFlow: (flow?: string) => TFlow;
}

declare module "yarn-audit-fix/target/es6/ifaces" {
  declare export type TFlags = { [key: string]: any, ... };
  declare export type TFlagsMapping = {
    [flag: string]:
      | string
      | {
          key?: string,
          value?: string,
          values?: {
            [val: string]: string,
            ...
          },
          ...
        },
    ...
  };
  declare export type TContext = {
    ctx: TContext,
    cwd: string,
    temp: string,
    flags: TFlags,
    manifest: { [key: string]: any, ... },
    err?: any,
    ...
  };
  declare export type TCallback = (cxt: TContext) => void | Promise<void>;
  declare export type TStage = [string] & TCallback[];
  declare export type ICallable<A: any[] = any[], R = any> = (...args: A) => R;
  declare export type TFlow = {
    main: TStage[],
    fallback: TStage[],
    ...
  };
  declare export type TAuditAdvisory = {
    module_name: string,
    vulnerable_versions: string,
    patched_versions: string,
    ...
  };
  declare export type TAuditEntry = {
    data: {
      advisory: TAuditAdvisory,
      ...
    },
    ...
  };
  declare export type TAuditReport = {
    [versionInfo: string]: TAuditAdvisory,
    ...
  };
  declare export type TLockfileObject = {
    [versionInfo: string]: {
      version: string,
      resolved: string,
      integrity: string,
      dependencies: string[],
      ...
    },
    ...
  };
}

declare module "yarn-audit-fix/target/es6/lockfile" {
  import type { SpawnSyncReturns } from "child_process";

  import type {
    TAuditReport,
    TContext,
    TLockfileObject,
  } from "yarn-audit-fix/target/es6/ifaces";

  declare export var _read: (name: string) => TLockfileObject;
  declare export var _write: (name: string, lockfile: TLockfileObject) => void;

  /**
   * Pulled up from https://github.com/hfour/yarn-audit-fix-ng/blob/main/src/index.ts
   */
  declare export var _patch: (
    lockfile: TLockfileObject,
    report: TAuditReport,
    x: TContext
  ) => TLockfileObject;
  declare export var _audit: (x: TContext) => TAuditReport;
  declare export var _parseAuditJsonReport: (
    data: string | SpawnSyncReturns<Buffer>
  ) => TAuditReport;
  declare export var _internal: {
    _read: (name: string) => TLockfileObject,
    _audit: (x: TContext) => TAuditReport,
    _patch: (
      lockfile: TLockfileObject,
      report: TAuditReport,
      x: TContext
    ) => TLockfileObject,
    _parseAuditJsonReport: (
      data: string | SpawnSyncReturns<Buffer>
    ) => TAuditReport,
    _write: (name: string, lockfile: TLockfileObject) => void,
    ...
  };
  declare export var read: typeof _read;
  declare export var audit: typeof _audit;
  declare export var patch: typeof _patch;
  declare export var write: typeof _write;
  declare export var parseAuditJsonReport: typeof _parseAuditJsonReport;
}

declare module "yarn-audit-fix/target/es6/runner" {
  import type {
    TContext,
    TFlags,
    TFlow,
    TStage,
  } from "yarn-audit-fix/target/es6/ifaces";

  /**
   * Build running context.
   */
  declare export var getContext: (flags?: TFlags) => TContext;

  /**
   * Run cmd stack.
   * @param stages
   * @param ctx
   */
  declare export var exec: (stages: TStage[], ctx: TContext) => void;

  /**
   * Public static void main.
   */
  declare export var runSync: (_flags?: TFlags, _flow?: TFlow | void) => void;
  declare export var run: {
    (_flags?: TFlags, _flow?: TFlow | void): Promise<void>,
    sync: (_flags?: TFlags, _flow?: TFlow | void) => void,
    ...
  };
}

declare module "yarn-audit-fix/target/es6/stages" {
  import type { TCallback } from "yarn-audit-fix/target/es6/ifaces";

  /**
   * Print runtime context digest.
   */
  declare export var printRuntimeDigest: TCallback;

  /**
   * Prepare temp assets.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var createTempAssets: TCallback;

  /**
   * Provide symlinks to node_modules and workspaces
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var createSymlinks: TCallback;

  /**
   * Convert yarn.lock to package-lock.json for further audit.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var yarnLockToPkgLock: TCallback;

  /**
   * Apply npm audit fix.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var npmAuditFix: TCallback;

  /**
   * Generate yarn.lock by package-lock.json data.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var yarnImport: TCallback;
  declare export var syncLockfile: TCallback;

  /**
   * Apply yarn install to fetch packages after yarn.lock update.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var yarnInstall: TCallback;

  /**
   * Clean up temporaries.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var clear: TCallback;

  /**
   * Exit on error.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var exit: TCallback;
  declare export var patchLockfile: TCallback;

  /**
   * Check that everything is fine with pkg dir.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var verify: TCallback;
}

declare module "yarn-audit-fix/target/es6/util" {
  import type { SymlinkType } from "fs-extra";

  import type { TFlags, TFlagsMapping } from "yarn-audit-fix/target/es6/ifaces";

  declare var cp: any;
  declare export var pkgDir: (cwd: string) => string;
  declare export var invoke: (
    cmd: string,
    args: string[],
    cwd: string,
    silent?: boolean,
    inherit?: boolean,
    skipError?: boolean
  ) => string | $Call<<R>((...args: any[]) => R) => R, typeof cp.spawnSync>;
  declare export var normalizeFlags: (flags: TFlags) => TFlags;
  declare export var formatFlags: (
    flags: TFlags,
    ...picklist: string[]
  ) => string[];
  declare export var mapFlags: (
    flags: TFlags,
    mapping: TFlagsMapping
  ) => TFlags;
  declare export var isWindows: () => boolean;
  declare export var getSymlinkType: (type?: string | void) => SymlinkType;
  declare export var getYarn: () => string;
  declare export var getClosestBin: (cmd: string) => string;
  declare export var getNpm: (npmPath?: string, isWin?: boolean) => string;
  declare export var getWorkspaces: (
    cwd: string,
    manifest: { [key: string]: any, ... }
  ) => string[];
  declare export var readJson: (path: string) => any;
  declare export var ensureDir: (dir: string) => string;
  declare export var getTemp: (cwd: string, temp?: string | void) => string;
  declare export var attempt: <T>(f: () => T) => T | null;
  declare export {};
}

declare module "yarn-audit-fix/target/esnext" {
  declare export { getFlow } from "yarn-audit-fix/target/esnext/flows";

  declare export * from "yarn-audit-fix/target/esnext/ifaces";

  declare export * from "yarn-audit-fix/target/esnext/lockfile";

  declare export * from "yarn-audit-fix/target/esnext/runner";

  declare export * from "yarn-audit-fix/target/esnext/stages";

  declare export * from "yarn-audit-fix/target/esnext/util";
}

declare module "yarn-audit-fix/target/esnext/flows" {
  import type { TFlow } from "yarn-audit-fix/target/esnext/ifaces";

  declare export var convert: TFlow;
  declare export var patch: TFlow;
  declare export var getFlow: (flow?: string) => TFlow;
}

declare module "yarn-audit-fix/target/esnext/ifaces" {
  declare export type TFlags = { [key: string]: any, ... };
  declare export type TFlagsMapping = {
    [flag: string]:
      | string
      | {
          key?: string,
          value?: string,
          values?: {
            [val: string]: string,
            ...
          },
          ...
        },
    ...
  };
  declare export type TContext = {
    ctx: TContext,
    cwd: string,
    temp: string,
    flags: TFlags,
    manifest: { [key: string]: any, ... },
    err?: any,
    ...
  };
  declare export type TCallback = (cxt: TContext) => void | Promise<void>;
  declare export type TStage = [string] & TCallback[];
  declare export type ICallable<A: any[] = any[], R = any> = (...args: A) => R;
  declare export type TFlow = {
    main: TStage[],
    fallback: TStage[],
    ...
  };
  declare export type TAuditAdvisory = {
    module_name: string,
    vulnerable_versions: string,
    patched_versions: string,
    ...
  };
  declare export type TAuditEntry = {
    data: {
      advisory: TAuditAdvisory,
      ...
    },
    ...
  };
  declare export type TAuditReport = {
    [versionInfo: string]: TAuditAdvisory,
    ...
  };
  declare export type TLockfileObject = {
    [versionInfo: string]: {
      version: string,
      resolved: string,
      integrity: string,
      dependencies: string[],
      ...
    },
    ...
  };
}

declare module "yarn-audit-fix/target/esnext/lockfile" {
  import type { SpawnSyncReturns } from "child_process";

  import type {
    TAuditReport,
    TContext,
    TLockfileObject,
  } from "yarn-audit-fix/target/esnext/ifaces";

  declare export var _read: (name: string) => TLockfileObject;
  declare export var _write: (name: string, lockfile: TLockfileObject) => void;

  /**
   * Pulled up from https://github.com/hfour/yarn-audit-fix-ng/blob/main/src/index.ts
   */
  declare export var _patch: (
    lockfile: TLockfileObject,
    report: TAuditReport,
    x: TContext
  ) => TLockfileObject;
  declare export var _audit: (x: TContext) => TAuditReport;
  declare export var _parseAuditJsonReport: (
    data: string | SpawnSyncReturns<Buffer>
  ) => TAuditReport;
  declare export var _internal: {
    _read: (name: string) => TLockfileObject,
    _audit: (x: TContext) => TAuditReport,
    _patch: (
      lockfile: TLockfileObject,
      report: TAuditReport,
      x: TContext
    ) => TLockfileObject,
    _parseAuditJsonReport: (
      data: string | SpawnSyncReturns<Buffer>
    ) => TAuditReport,
    _write: (name: string, lockfile: TLockfileObject) => void,
    ...
  };
  declare export var read: typeof _read;
  declare export var audit: typeof _audit;
  declare export var patch: typeof _patch;
  declare export var write: typeof _write;
  declare export var parseAuditJsonReport: typeof _parseAuditJsonReport;
}

declare module "yarn-audit-fix/target/esnext/runner" {
  import type {
    TContext,
    TFlags,
    TFlow,
    TStage,
  } from "yarn-audit-fix/target/esnext/ifaces";

  /**
   * Build running context.
   */
  declare export var getContext: (flags?: TFlags) => TContext;

  /**
   * Run cmd stack.
   * @param stages
   * @param ctx
   */
  declare export var exec: (stages: TStage[], ctx: TContext) => void;

  /**
   * Public static void main.
   */
  declare export var runSync: (_flags?: TFlags, _flow?: TFlow | void) => void;
  declare export var run: {
    (_flags?: TFlags, _flow?: TFlow | void): Promise<void>,
    sync: (_flags?: TFlags, _flow?: TFlow | void) => void,
    ...
  };
}

declare module "yarn-audit-fix/target/esnext/stages" {
  import type { TCallback } from "yarn-audit-fix/target/esnext/ifaces";

  /**
   * Print runtime context digest.
   */
  declare export var printRuntimeDigest: TCallback;

  /**
   * Prepare temp assets.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var createTempAssets: TCallback;

  /**
   * Provide symlinks to node_modules and workspaces
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var createSymlinks: TCallback;

  /**
   * Convert yarn.lock to package-lock.json for further audit.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var yarnLockToPkgLock: TCallback;

  /**
   * Apply npm audit fix.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var npmAuditFix: TCallback;

  /**
   * Generate yarn.lock by package-lock.json data.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var yarnImport: TCallback;
  declare export var syncLockfile: TCallback;

  /**
   * Apply yarn install to fetch packages after yarn.lock update.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var yarnInstall: TCallback;

  /**
   * Clean up temporaries.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var clear: TCallback;

  /**
   * Exit on error.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var exit: TCallback;
  declare export var patchLockfile: TCallback;

  /**
   * Check that everything is fine with pkg dir.
   * @param {TContext} cxt
   * @return {void}
   */
  declare export var verify: TCallback;
}

declare module "yarn-audit-fix/target/esnext/util" {
  import type { SymlinkType } from "fs-extra";

  import type {
    TFlags,
    TFlagsMapping,
  } from "yarn-audit-fix/target/esnext/ifaces";

  declare var cp: any;
  declare export var pkgDir: (cwd: string) => string;
  declare export var invoke: (
    cmd: string,
    args: string[],
    cwd: string,
    silent?: boolean,
    inherit?: boolean,
    skipError?: boolean
  ) => string | $Call<<R>((...args: any[]) => R) => R, typeof cp.spawnSync>;
  declare export var normalizeFlags: (flags: TFlags) => TFlags;
  declare export var formatFlags: (
    flags: TFlags,
    ...picklist: string[]
  ) => string[];
  declare export var mapFlags: (
    flags: TFlags,
    mapping: TFlagsMapping
  ) => TFlags;
  declare export var isWindows: () => boolean;
  declare export var getSymlinkType: (type?: string | void) => SymlinkType;
  declare export var getYarn: () => string;
  declare export var getClosestBin: (cmd: string) => string;
  declare export var getNpm: (npmPath?: string, isWin?: boolean) => string;
  declare export var getWorkspaces: (
    cwd: string,
    manifest: { [key: string]: any, ... }
  ) => string[];
  declare export var readJson: (path: string) => any;
  declare export var ensureDir: (dir: string) => string;
  declare export var getTemp: (cwd: string, temp?: string | void) => string;
  declare export var attempt: <T>(f: () => T) => T | null;
  declare export {};
}
